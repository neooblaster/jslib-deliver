var ParenthesisParser={parse:function($sString,$sParamSeparator=",",$sValueSeparator=":"){let oObject={};let bKeySetUp=false;let bBackslashUp=false;let bComposingQuoteString=false;let bBufferingStructure=false;let bBufferingStructureDone=false;let nOpeningParenthesisCrossed=0;let sBufferedKey="";let sBufferedValue=null;for(let i=1;i<$sString.length-1;i++){let sChar=$sString[i];if(sChar==="("&&!(bComposingQuoteString&&bBackslashUp)){if(!bBufferingStructure){bBufferingStructure=true}else{nOpeningParenthesisCrossed++}if(sBufferedValue===null){sBufferedValue=sChar}else{sBufferedValue+=sChar}}else if(sChar===")"&&!(bComposingQuoteString&&bBackslashUp)&&bBufferingStructure){if(nOpeningParenthesisCrossed){nOpeningParenthesisCrossed--}else{bBufferingStructureDone=true}if(sBufferedValue===null){sBufferedValue=sChar}else{sBufferedValue+=sChar}}else if(sChar===$sValueSeparator&&!(bComposingQuoteString&&bBackslashUp)&&!(bBufferingStructure^bBufferingStructureDone)){sBufferedValue="";bKeySetUp=true}else if(sChar===$sParamSeparator&&!(bComposingQuoteString&&bBackslashUp)){if(!(bBufferingStructure^bBufferingStructureDone)){if(bKeySetUp){oObject[sBufferedKey]=sBufferedValue}else{if(bBufferingStructure&&bBufferingStructureDone){let nIndex=0;while(oObject.hasOwnProperty(nIndex)){nIndex++}oObject[nIndex]=sBufferedValue}else{oObject[sBufferedKey]=sBufferedValue}}bKeySetUp=false;sBufferedKey="";sBufferedValue=null;bBufferingStructure=false;bBufferingStructureDone=false}else if(bBufferingStructure&&!bBufferingStructureDone){if(sBufferedValue===null){sBufferedValue=sChar}else{sBufferedValue+=sChar}}}else if(sChar==="\\"&&!bBackslashUp){}else if((sChar==="'"||sChar==='"')&&!bBackslashUp&&!(bBufferingStructure^bBufferingStructureDone)){bComposingQuoteString=!bComposingQuoteString}else{if(bBufferingStructure^bBufferingStructureDone){if(sBufferedValue===null){sBufferedValue=sChar}else{sBufferedValue+=sChar}}else{if(!bKeySetUp){sBufferedKey+=sChar}else{if(sBufferedValue===null){sBufferedValue=sChar}else{sBufferedValue+=sChar}}}}}if(sBufferedKey||sBufferedValue){if(sBufferedKey){oObject[sBufferedKey]=sBufferedValue}if(!sBufferedKey&&sBufferedValue){let nIndex=0;while(oObject.hasOwnProperty(nIndex)){nIndex++}oObject[nIndex]=sBufferedValue}}for(let sKey in oObject){if(!oObject.hasOwnProperty(sKey))continue;let sString=oObject[sKey];if(/(\(.+\))/.test(sString)){let aSplit=sString.split(/(\(.+\))/);let preVal=aSplit[0];let postVal=aSplit[2];let oSubObject=ParenthesisParser.parse(aSplit[1],$sParamSeparator,$sValueSeparator);oObject[sKey]=Object.assign(Object.defineProperties({},{preVal:{enumerable:false,writable:true,value:preVal},postVal:{enumerable:false,writable:true,value:postVal},sourceVal:{enumerable:false,writable:true,value:sString}}),oSubObject)}}Object.defineProperties(oObject,{sourceVal:{enumerable:false,writable:true,value:$sString}});return oObject},stringify:function($oObject={},$sParamSeparator=",",$sValueSeparator=":",aForbiddenCharInKey=["[$]+"],aForbiddenCharInValue=[]){let sOutputString="(";let bFirstKeyValue=true;let bFirstEntry=true;for(let sPty in $oObject){if(!$oObject.hasOwnProperty(sPty))continue;let sIntermediateString="";let sKey=sPty;let sValue=$oObject[sPty];if(aForbiddenCharInKey.length){let sEscapeRegExpForKey=aForbiddenCharInKey.join("|");let oEscapeRegExpForKey=new RegExp(`${sEscapeRegExpForKey}`,"g");if(oEscapeRegExpForKey.test(sPty)){sKey=`'${sKey}'`}}if(Object.prototype.toString.call(sValue)==="[object Object]"){if(/^[0-9]+$/.test(sPty)){if(bFirstEntry){bFirstEntry=false}else{sIntermediateString+=","}}else{sIntermediateString=`${bFirstKeyValue?"":","}${sKey}${$sValueSeparator}`}if(sValue.preVal)sIntermediateString+=sValue.preVal;sIntermediateString+=ParenthesisParser.stringify(sValue,$sParamSeparator,$sValueSeparator,aForbiddenCharInKey,aForbiddenCharInValue);if(sValue.postVal)sIntermediateString+=sValue.postVal}else{if(sValue===null){sIntermediateString=`${bFirstKeyValue?"":","}${sKey}`}else if(sValue===""){sValue="''";sIntermediateString=`${bFirstKeyValue?"":","}${sKey}${$sValueSeparator}${sValue}`}else{if(aForbiddenCharInValue.length){let sEscapeRegExpForValue=aForbiddenCharInValue.join("|");let oEscapeRegExpForValue=new RegExp(`${sEscapeRegExpForValue}`,"g");if(oEscapeRegExpForValue.test(sValue)){sValue=`'${sValue}'`}}sIntermediateString=`${bFirstKeyValue?"":","}${sKey}${$sValueSeparator}${sValue}`}}sOutputString+=sIntermediateString;bFirstKeyValue=false}sOutputString+=")";return sOutputString}};